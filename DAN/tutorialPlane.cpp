//===================================================================================================================================
//【tutorialPlane.cpp】
// [作成者]HAL東京GP12A332 16 蔡 友剛
// [作成日]2019/11/05
// [更新日]2019/11/05
//===================================================================================================================================

//===================================================================================================================================
//【インクルード】
//===================================================================================================================================
#include "tutorialPlane.h"
#include "ShaderLoader.h"
#include "TextureLoader.h"

//===================================================================================================================================
//【using宣言】
//===================================================================================================================================
using namespace tutorialPlaneNS;

//===================================================================================================================================
//【インスタンスクラス：コンストラクタ】
//===================================================================================================================================
EnemyPlaneInstance::EnemyPlaneInstance(D3DXVECTOR3 position) : InstancingBillboardNS::Instance()
{
	//初期値の設定
	this->position = position;
	this->rotation = D3DXVECTOR3(0, 0, 0);
	this->scale = D3DXVECTOR2(1.0f, 1.0f);
	this->speed = D3DXVECTOR3(0, 360.0f / 900.0f, 0);
	this->limitTime = 1.0f;
	this->uv.x = 0.125f * 7;
	this->uv.y = 0.125f * 7;
	
	this->tmpCnt = 0;
}

//===================================================================================================================================
//【インスタンスクラス：更新】
//===================================================================================================================================
void EnemyPlaneInstance::update(float frameTime)
{
	//lifeTimer += frameTime;
	if (lifeTimer >= limitTime)return;

	//仮処理
	tmpCnt++;
	if (tmpCnt >= INT_MAX)
	{
		tmpCnt -= INT_MAX;
	}

	//sinカーブ
	this->position.y += sin(tmpCnt * speed.y);
}

//===================================================================================================================================
//【インスタンスクラス：コンストラクタ】
//===================================================================================================================================
IDKPlaneInstance::IDKPlaneInstance(D3DXVECTOR3 position) : InstancingBillboardNS::Instance()
{
	//初期値の設定
	this->position = position;
	this->rotation = D3DXVECTOR3(0, 0, 0);
	this->scale = D3DXVECTOR2(10.0f, 5.0f);
	this->speed = D3DXVECTOR3(0, 0, 0);
	this->limitTime = 1.0f;
	this->uv.x = 0.125f * 7;
	this->uv.y = 0.125f * 7;
}

//===================================================================================================================================
//【インスタンスクラス：更新】
//===================================================================================================================================
void IDKPlaneInstance::update(float frameTime)
{
	//lifeTimer += frameTime;
	if (lifeTimer >= limitTime)return;
}

//===================================================================================================================================
//【コンストラクタ】
//===================================================================================================================================
TutorialPlane::TutorialPlane() :InstancingBillboard::InstancingBillboard()
{
	InstancingBillboard::initialize(*textureNS::reference(textureNS::COLOR_SCALE), 7, 7);

}

//===================================================================================================================================
//【初期化】
//===================================================================================================================================
void TutorialPlane::init(int planeID, D3DXVECTOR3 position)
{
	switch (planeID)
	{
	case TUTORIAL_PLANE_ID::PLANE_ENEMY:
		generateInstance(new EnemyPlaneInstance(position));
		break;
	case TUTORIAL_PLANE_ID::PLANE_IDK:
		generateInstance(new IDKPlaneInstance(position));
		break;
	default:
		break;
	}
}

//===================================================================================================================================
//【デストラクタ】
//===================================================================================================================================
TutorialPlane::~TutorialPlane()
{

}

//===================================================================================================================================
//【更新】
//===================================================================================================================================
void TutorialPlane::update(float frameTime)
{
	InstancingBillboard::update(frameTime);
}
