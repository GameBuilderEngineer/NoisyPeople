//===================================================================================================================================
//【VisionState.cpp】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/11/17
// [更新日]2019/11/24
//===================================================================================================================================

//===================================================================================================================================
//【インクルード】
//===================================================================================================================================
#include "VisionState.h"
#include "NormalState.h"
#include "DigitalShiftState.h"

//===================================================================================================================================
//【using宣言】
//===================================================================================================================================
using namespace playerNS;
using namespace visionNS;

//===================================================================================================================================
//【コンストラクタ】
//===================================================================================================================================
VisionState::VisionState(Player* player):AbstractState()
{
	//共通項目
	this->player = player;
	stateTimer = 0.0f;
	type		= VISION;
	nextType	= NORMAL;
	stateName	= "VISION";
	onTrans		= false;
	player->setValidOperation(
		ENABLE_JUMP |
		ENABLE_SKY_VISION | 
		ENABLE_CANCEL_VISION);
	//固有項目
	costTimer = 0.0f;		//電力消費タイマー

}

//===================================================================================================================================
//【デストラクタ】
//===================================================================================================================================
VisionState::~VisionState()
{
}

//===================================================================================================================================
//【開始処理】
//===================================================================================================================================
void VisionState::start()
{
}

//===================================================================================================================================
//【更新】
//===================================================================================================================================
void VisionState::update(float frameTime)
{
	this->frameTime = frameTime;
	stateTimer += frameTime;

	//電力消費
	costTimer += frameTime;
	if (costTimer > COST_TIME)
	{
		player->addpower(-COST);
		costTimer = 0.0f;
	}

	//状態遷移
	if (player->cancelVision())				return;		//ビジョンのキャンセル
	else if (player->skyVision())			return;		//スカイビジョン
	else if (player->digitalShift())		return;		//デジタルシフト
	else if (player->getPower() <= 0)
	{
		player->returnTransitionCamera(0.0f);
		player->transState(NORMAL);		return;	//通常状態
	}
}

//===================================================================================================================================
//【操作】
//===================================================================================================================================
void VisionState::operation()
{
	// 操作
	player->moveOperation();			//移動操作
	player->jumpOperation();			//ジャンプ操作
}

//===================================================================================================================================
//【物理処理】
//===================================================================================================================================
void VisionState::physics()
{
	player->grounding();				// 接地処理
	player->physicalBehavior();			// 物理挙動
	player->updatePhysics(frameTime);	// 物理の更新
}

//===================================================================================================================================
//【カメラ操作】
//===================================================================================================================================
void VisionState::controlCamera()
{
	player->transitionCamera();

	player->controlCamera(frameTime);
}

//===================================================================================================================================
//【状態遷移】
//===================================================================================================================================
AbstractState* VisionState::transition()
{
	switch (nextType)
	{
	case DIGITAL_SHIFT:
		return new digitalShiftNS::DigitalShiftState(player);
		break;
	case NORMAL:default:
		return new normalNS::NormalState(player);
		break;
	}
}

//===================================================================================================================================
//【終了処理】
//===================================================================================================================================
void VisionState::end()
{

}


