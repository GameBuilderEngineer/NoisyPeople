//===================================================================================================================================
//【Fader.h】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/09/20
// [更新日]2019/11/01
//===================================================================================================================================

//===================================================================================================================================
//【インクルード】
//===================================================================================================================================
#include "Fader.h"
#include "ShaderLoader.h"
#include "Direct3D9.h"

//===================================================================================================================================
//【グローバル変数】
//===================================================================================================================================
Fader* pointerFader = NULL;

//===================================================================================================================================
//【外部参照】
//===================================================================================================================================
Fader* getFader() {
	return pointerFader;
}

//===================================================================================================================================
//【コンストラクタ】
//===================================================================================================================================
Fader::Fader()
{
	pointerFader = this;

	device = getDevice();
	inTimer = 0.0f;
	outTimer = 0.0f;
	stopTimer = 0.0f;

	shaderState = NULL;

	targetTexture = NULL;
	textureZBuffer = NULL;
	//テクスチャオブジェクトの作成
	D3DXCreateTexture(getDevice(), WINDOW_WIDTH, WINDOW_HEIGHT, 0,
		D3DUSAGE_RENDERTARGET, D3DFMT_A8R8G8B8, D3DPOOL_DEFAULT, &targetTexture);
	//テクスチャをレンダリングターゲットする際のZバッファを作成
	D3DSURFACE_DESC desc;
	targetTexture->GetLevelDesc(0, &desc);
	getDevice()->CreateDepthStencilSurface(desc.Width, desc.Height,
		D3DFMT_D16, D3DMULTISAMPLE_NONE, 0, true, &textureZBuffer, NULL);

	//フェード描画頂点構造体
	point[0] = {-1,1,1,0,0 };
	point[1] = {1,1,1,1,0 };
	point[2] = {-1,-1,1,0,1 };
	point[3] = {1,-1,1,1,1 };

	playing = false;
}

//===================================================================================================================================
//【デストラクタ】
//===================================================================================================================================
Fader::~Fader()
{

}

//===================================================================================================================================
//【描画】
//===================================================================================================================================
void Fader::render()
{
	if (shaderState == NULL)return;

	getDirect3D9()->setRenderBackBuffer(0);
	device->SetRenderState(D3DRS_LIGHTING, false);
	device->SetFVF(D3DFVF_XYZ | D3DFVF_TEX1);
	D3DSURFACE_DESC desc;
	targetTexture->GetLevelDesc(0, &desc);

	shaderState->setValue(desc);
	shaderState->begin(0);
	shaderState->updateValue();

	device->DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, point, sizeof(FADE_VERTEX));

	shaderState->end();
}

//===================================================================================================================================
//【テクスチャへ描画対象を切り替える】
//===================================================================================================================================
void Fader::setRenderTexture()
{
	LPDIRECT3DSURFACE9 surface = NULL;
	targetTexture->GetSurfaceLevel(0, &surface);
	getDevice()->SetRenderTarget(0, surface);
	getDevice()->SetDepthStencilSurface(textureZBuffer);
	SAFE_RELEASE(surface);
}

//===================================================================================================================================
//【シェーダの設定切り替え】
//===================================================================================================================================
void Fader::setShader(int shaderType)
{
	switch (shaderType)
	{
	case faderNS::SHADER_TYPE::BLUR:
		shaderState = new faderNS::BlurShader(2, targetTexture);
		break;
	}
}

//===================================================================================================================================
//【再生】
//===================================================================================================================================
void Fader::play()
{
	playing = true;
	outTimer = shaderState->outTime;
}

//===================================================================================================================================
//【停止】
//===================================================================================================================================
void Fader::stop()
{
	playing = false;
}


