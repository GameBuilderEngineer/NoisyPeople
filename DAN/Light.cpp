//===================================================================================================================================
//【Light.cpp】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/09/20
// [更新日]2019/11/13
//===================================================================================================================================

//===================================================================================================================================
//【インクルード】
//===================================================================================================================================
#include "Light.h"

//===================================================================================================================================
//【コンストラクタ】
//===================================================================================================================================
Light::Light()
{

}

//===================================================================================================================================
//【デストラクタ】
//===================================================================================================================================
Light::~Light()
{

}

//===================================================================================================================================
//【初期化】
//===================================================================================================================================
void Light::initialize() {
	// ライトをあてる 白色で光沢反射ありに設定
	D3DXVECTOR3 vDirection(0, -1, 1);
	D3DLIGHT9 light;
	ZeroMemory(&light, sizeof(D3DLIGHT9));
	light.Type = D3DLIGHT_DIRECTIONAL;
	light.Diffuse.r = 1.0f;
	light.Diffuse.g = 1.0f;
	light.Diffuse.b = 1.0f;
	light.Diffuse.a = 1.0f;
	light.Specular = light.Diffuse;
	D3DXVec3Normalize((D3DXVECTOR3*)&light.Direction, &vDirection);
	light.Range = 20.0f;
	getDevice()->SetLight(0, &light);
	getDevice()->LightEnable(0, true);

	// グローバルアンビエントライト
	getDevice()->SetRenderState(D3DRS_AMBIENT, 0xff0f0f0f); // 0xARGB
}
