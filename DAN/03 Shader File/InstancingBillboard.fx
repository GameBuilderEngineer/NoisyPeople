//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//グローバル
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float4x4 matrixProjection;
float4x4 matrixView;
//float4x4 cancelRotation;
//CPU側で演算する方法も検討中（インスタンシングにより数が多くなるので、事前計算の方が早い？？）
texture planeTexture;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//定義
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
sampler textureSampler = sampler_state
{
	texture = <planeTexture>;
	MipFilter = NONE;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
};

struct VS_OUT
{
	float4 position : POSITION;
	float2 uv : TEXCOORD0;
	float4 color : COLOR0;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//バーテックス・シェーダー
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VS_OUT vsMain(
	float2 position : POSITION, 
	float2 localUV : TEXCOORD0,
	float3 worldPosition : TEXCOORD1,
	float4 color : COLOR0)
{
	VS_OUT Out;

	Out.position = float4(
		position.x,
		position.y,
		0.0f,
		1.0f);

	float4x4 matrixWorld = float4x4(
		1.0f,0.0f,0.0f,0.0f,
		0.0f,1.0f,0.0f,0.0f,
		0.0f,0.0f,1.0f,0.0f,
		worldPosition.x, worldPosition.y, worldPosition.z,1.0f);

	float4x4 cancelRotation = matrixView;
	cancelRotation._41_42_43 = 0.0f;
	cancelRotation = transpose(cancelRotation);
	matrixWorld = mul(cancelRotation,matrixWorld);


	matrixWorld = mul(matrixWorld,matrixView);
	matrixWorld = mul(matrixWorld,matrixProjection);

	Out.position = mul(Out.position, matrixWorld);

	Out.uv = localUV;

	Out.color = color;

	return Out;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ピクセル・シェーダー
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float4 psMain(VS_OUT In) : COLOR0
{
	return tex2D(textureSampler, In.uv)*In.color;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// テクニック
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
technique mainTechnique {
	pass p0 {
		VertexShader = compile vs_2_0 vsMain();
		PixelShader = compile ps_2_0 psMain();
	}
}
