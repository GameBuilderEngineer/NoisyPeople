//===================================================================================================================================
//【DigitalShiftState.cpp】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/11/17
// [更新日]2019/11/24
//===================================================================================================================================

//===================================================================================================================================
//【インクルード】
//===================================================================================================================================
#include "DigitalShiftState.h"
#include "NormalState.h"

//===================================================================================================================================
//【using宣言】
//===================================================================================================================================
using namespace playerNS;
using namespace digitalShiftNS;

//===================================================================================================================================
//【コンストラクタ】
//===================================================================================================================================
DigitalShiftState::DigitalShiftState(Player* player):AbstractState()
{
	//共通項目
	this->player = player;
	stateTimer	= 0.0f;
	type		= DIGITAL_SHIFT;
	nextType	= NORMAL;
	stateName	= "DIGITAL_SHIFT";
	onTrans		= false;
	player->setValidOperation(
		DISABLE_OPERATION		//操作不能
	);
	//固有項目
	shiftTimer = 0.0f;			//シフト時間
}

//===================================================================================================================================
//【デストラクタ】
//===================================================================================================================================
DigitalShiftState::~DigitalShiftState()
{
	
}

//===================================================================================================================================
//【開始処理】
//===================================================================================================================================
void DigitalShiftState::start()
{
}

//===================================================================================================================================
//【更新】
//===================================================================================================================================
void DigitalShiftState::update(float frameTime)
{
	this->frameTime = frameTime;
	stateTimer += frameTime;
	shiftTimer += frameTime;

	if (EFFECT_TIME > effectTimer && effectTimer >= 0.0f )
	{
		effectTimer += frameTime;
	}
	else if(effectTimer > EFFECT_TIME){
		//エフェクト後デジタルシフトを実行
		player->executionDigitalShift();
		effectTimer = -1.0f;
	}

	//状態遷移
	if (shiftTimer > SHIFT_TIME)
	{
		player->returnTransitionCamera(0.5f);
		player->transState(NORMAL); return;//通常状態に戻る
	}

}

//===================================================================================================================================
//【操作】
//===================================================================================================================================
void DigitalShiftState::operation()
{
	// 操作
}

//===================================================================================================================================
//【物理処理】
//===================================================================================================================================
void DigitalShiftState::physics()
{

}

//===================================================================================================================================
//【物理処理】
//===================================================================================================================================
void DigitalShiftState::controlCamera()
{
	if (effectTimer> EFFECT_TIME) {
		//エフェクト後カメラを遷移
		player->transitionCamera();
	}

	player->controlCamera(frameTime);
}

//===================================================================================================================================
//【状態遷移】
//===================================================================================================================================
AbstractState* DigitalShiftState::transition()
{
	return new normalNS::NormalState(player);
}

//===================================================================================================================================
//【終了処理】
//===================================================================================================================================
void DigitalShiftState::end()
{

}



