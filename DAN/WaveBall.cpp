//===================================================================================================================================
//ÅyWaveBall.hÅz
// [çÏê¨é“]HALìåãûGP12A332 16 ‰Ô óFçÑ
// [çÏê¨ì˙]2019/11/15
// [çXêVì˙]2019/11/15
//===================================================================================================================================
#include "WaveBall.h"
#include "Direct3D9.h"

int WaveBall::dataMax = 0;
float *WaveBall::fData = 0;

//===================================================================================================================================
//ÅyÉRÉìÉXÉgÉâÉNÉ^Åz
//===================================================================================================================================
WaveBall::WaveBall()
{
	////í∏ì_ÇÃç¿ïW
	//D3DXVECTOR3 vertex[] = {
	//	D3DXVECTOR3(-0.2f, 0.5f, 0.0f),
	//	D3DXVECTOR3(0.2f, 0.5f, 0.0f),
	//};

	InitVertex();

	//D3D9_BUFFER_DESC bd;
	//bd.ByteWidth = sizeof(VERTEX) * 2;
}

//===================================================================================================================================
//ÅyÉfÉXÉgÉâÉNÉ^Åz
//===================================================================================================================================
WaveBall::~WaveBall()
{

}

//===================================================================================================================================
//ÅyçXêVÅz
//===================================================================================================================================
void WaveBall::update()
{

}

//===================================================================================================================================
//Åyï`âÊÅz
//===================================================================================================================================
void WaveBall::draw(void)
{
	LPDIRECT3DDEVICE9 device = getDevice();
	LPD3DXLINE pLine;
	D3DXCreateLine(device, &pLine);

	const float X = 400;
	const float Y = 400;
	const int Sides = dataMax;
	const float Radius = 300;
	const D3DCOLOR color = D3DCOLOR_XRGB(255, 0, 0);

	D3DXVECTOR2* vLine;
	vLine = new D3DXVECTOR2[Sides + 1];
	float Theta;
	float WedgeAngle;

	WedgeAngle = (float)((2 * D3DX_PI) / Sides);
	for (int i = 0; i <= Sides; i++)
	{
		float xSize = X + 200 * (fData[i] / FLT_MAX);
		float ySize = X + 200 * (fData[i] / FLT_MAX);
		Theta = i * WedgeAngle;
		vLine[i].x = (xSize + Radius * cos(Theta));
		vLine[i].y = (ySize - Radius * sin(Theta));
	}
	pLine->SetWidth(2);
	pLine->SetAntialias(false);
	pLine->SetGLLines(false);
	pLine->Begin();
	pLine->Draw(vLine, (Sides + 1), color);
	pLine->End();

	SAFE_DELETE(vLine);
}

//===================================================================================================================================
//ÅyvertexWkèâä˙âªÅz
//===================================================================================================================================
void WaveBall::InitVertex(void)
{
	vertexWk[0].diffuse = D3DCOLOR_RGBA(255, 255, 255, 255);
	vertexWk[1].diffuse = D3DCOLOR_RGBA(255, 255, 255, 255);

	vertexWk[0].vtx = D3DXVECTOR3(100.0f,100.0f,0.0f);
	vertexWk[1].vtx = D3DXVECTOR3(200.0f, 500.0f, 0.0f);
}