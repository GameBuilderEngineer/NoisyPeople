//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//グローバル
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float4x4 matrixProjection;
float4x4 matrixView;
texture textureDecal;
float4 diffuse;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//定義
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
sampler textureSampler = sampler_state
{
	texture = <textureDecal>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VS_OUT
{
	float4 position :POSITION;
	float2 uv : TEXCOORD0;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//バーテックス・シェーダー
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VS_OUT VS(
	float4 position : POSITION,
	float2 localUV : TEXCOORD0,
	float3 worldPosition : TEXCOORD1)
{
	VS_OUT Out;

	//Out.position = position;
	Out.position = float4(
		position.x,
		position.y,
		position.z,
		1.0f);

	//ワールド行列を用意する。（現在は移動情報のみ）
	float4x4 matrixWorld = float4x4(
		1.0f, 0.0f, 0.0f, 0.0f,
		0.0f, 1.0f, 0.0f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.0f,
		worldPosition.x, worldPosition.y, worldPosition.z, 1.0f);

	//あとで実装予定
	//計算を全てGPU側で行った方が高速？？
	//移動行列の適用
	//回転行列の適用
	//スケール行列の適用


	//ビュー行列
	matrixWorld = mul(matrixWorld, matrixView);
	//プロジェクション行列
	matrixWorld = mul(matrixWorld, matrixProjection);
	
	Out.position = mul(Out.position, matrixWorld);

	Out.uv = localUV;

	return Out;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ピクセル・シェーダー
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float4 PS(VS_OUT In) : COLOR0
{
	return tex2D(textureSampler, In.uv)+diffuse;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// テクニック
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
technique mainTechnique {
	pass p0 {
		VertexShader = compile vs_2_0 VS();
		PixelShader = compile ps_2_0 PS();
	}
}
