//-----------------------------------------------------------------------------
// ナビゲーションメッシュ処理クラス [NavigationMesh.cpp]
// Author : HAL東京昼間部 2年制ゲーム学科 GP12A332 32 中込和輝
// 作成開始日 : 2019/10/5
//-----------------------------------------------------------------------------
#include "NavigationMesh.h"
#include "StaticMeshLoader.h"


//=============================================================================
// 初期化処理
//=============================================================================
void NavigationMesh::initialize()
{
	staticMesh =  staticMeshNS::getStaticMesh(staticMeshNS::SAMPLE_STATIC_MESH);

	//// 頂点フォーマットを確認するために使用
	// DWORD fvf = staticMesh->mesh->GetFVF();

	//// 頂点バッファの内容をみる
	//Vertex3D *vertex;
	//staticMesh->mesh->LockVertexBuffer(D3DLOCK_READONLY, (void**)&vertex);
	//staticMesh->mesh->UnlockVertexBuffer();

	//// インデックスバッファの内容をみる
	//WORD *index;
	//staticMesh->mesh->LockIndexBuffer(D3DLOCK_READONLY, (void**)&index);
	//staticMesh->mesh->UnlockIndexBuffer();
	
	// 隣接性バッファを用意してデータをコピー
	adjacency = new DWORD[staticMesh->mesh->GetNumFaces() * 3];
	staticMesh->mesh->GenerateAdjacency(0, adjacency);


}


//=============================================================================
// 終了処理
//=============================================================================
void NavigationMesh::uninitialize()
{
	SAFE_DELETE_ARRAY(adjacency)
}


//=============================================================================
// 更新処理
//=============================================================================
void NavigationMesh::update()
{

	// 自分のいるポリゴンのインデックスを取得

	// 開始ポリゴンに設定

	// 目的地ポリゴンを設定

	// 基準ノードに開始ポリゴンを設定する

	// オープンリストに開始ノードを追加する

	// A*----------------------------
	// ******** 基準ノードが目的地のノードである場合
	// 経路完成
	// ******** 基準ノードが目的地のノードでない場合
	// 基準ノードの周りをオープンしていく
	//（隣接性データをもとに）

	// 経路探索後、ポリゴン上での挙動も必要
}


#ifdef _DEBUG
//=============================================================================
// デバッグ描画
//=============================================================================
void NavigationMesh::debugRender()
{
}
#endif // _DEBUG

// FVFがわからない
// メッシュ情報埋めることに繋がるかもしれない
// Astarではエッジの情報を検索して、そのエッジのどこを目的地とするか、は別処理（AI資料に書いてある）